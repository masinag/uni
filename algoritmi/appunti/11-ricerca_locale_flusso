### RICERCA LOCALE ###
Se si conosce una soluzione ammissibile (non necessariamente ottima) ad un problema di
ottimizzazione, si può cercare di trovare una soluzione migliore nelle "vicinanze" di quella
precedente. Si continua finché non si è più in grado di migliorare.

Esempio: PROBLEMA DEL FLUSSO MASSIMO
@ Una RETE DI FLUSSO G = (V,E, s, t, c) è data da:
  * un grafo orientato G=(V,E)
  * un nodo sorgente s ∈ V
  * un nodo pozzo t ∈ V
  * una funzione di capacità c:V x V -> ℝ>=0 tale per cui (u,v) ∉ E => c(u,v) = 0

  Assunzioni: per ogni nodo v ∈ V esiste un cammino da s a t per v, altrimenti possiamo ignorare
              tale nodo

@ Un FLUSSO in G è una funzione F: V x V -> ℝ che soddisfa le seguenti proprietà:
  * VINCOLO SULLA CAPACITÀ: ∀u,v ∈ V, f(u,v) <= c(u,v)
    [il flusso non deve eccedere la capacità dell'arco]
  * ANTISIMMETRIA: ∀u,v ∈ V, f(u,v) = -f(v,u)
  * CONSERVAZIONE DEL FLUSSO: ∀u ∈ V - {s,t}, ∑f(u,v) = 0
    [analogamente, la somma dei flussi entranti deve essere uguale alla somma dei flussi uscenti]

@ Il VALORE DEL FLUSSO f è definito come:
  |f| = ∑f(s,v) = ∑f(v,t) la quantità di flusso uscente da s

# Problema: data una rete di flusso, trovare un flusso che abbia valore massimo fra tutti i flussi
  associabili alla rete
  |f*| = max {|f|}

ALGORITMO: METODO DELLE RETI RESIDUE
  Si memorizza un flusso "corrente" f, inizialmente nullo.
  Si ripetono le seguenti operazioni:
    * Si sottrae il flusso attuale dalla rete iniziale ottenendo una rete residua
    * Si cerca un flusso g all'interno della rete residua
    * si somma g a f
    fino a quando non è più possibile trovare un flusso positivo g

@ Definiamo FLUSSO NULLO la funzione f0 : V x V -> R tale che f(u,v) = 0 per ogni u,v ∈ V.

@ Per ogni coppia di flussi f1 e f2 in G, definiamo il FLUSSO SOMMA g = f1+f2 come un flusso tale
  per cui g(u,v) = f1(u,v) + f2(u,v).
  [non è detto che sia un flusso corretto, potrei violare il vincolo sulla capacità]

@ Definiamo CAPACITÀ RESIDUA di un flusso f in una rete G una funzione c_f : V x V -> R>=0 tale che
  c_f(u,v) = c(u,v) - f(u,v).
  # Per definizione di capacità residua, si creno degli archi all'indietro con capacità positiva.

@ Data una rete di flusso G e un flusso f su G, possiamo costruire una rete residua Gf = (V,E_f,s,t,c_f)
  tale per cui (u,v) ∈ E_f se e solo se c_f(u,v) > 0

DIMOSTRAZIONE CORRETTEZZA
a) Se f è un flusso in G e g è un flusso in Gf, allora f+g è un flusso in G.
  * vincolo sulla capacità
    g(u,v) <= c_f(u,v)                              * g è un flusso in Gf
    f(u,v) + g(u,v) <= c_f(u,v) + f(u,v)            * Aggiungo termine uguale
    (f+g) (u,v) <= c(u,v) - f(u,v) + f(u,v)         * Sostituzione
    (f+g)(u,v) <= c(u,v)
  * antisimmetria
    f(u,v) + g(u,v) = -f(v,u) - g(v,u)
    (f+g)(u,v) = -(f+g)(v,u)
  * conservazione
    ∑(f+g)(u,v) = ∑f(u,v) + g(u,v) = ∑f(u,v)+∑g(u,v) = 0 + 0 = 0

# Come trovare un flusso aggiuntivo?
  Si trova un cammino C=v0,...,vn con s = v0, t=vn nella rete residua Gf.
  Si identifica la capacità del cammino, corrispondente alla minore capacità degli archi incontrati:
    cf(C) = min cf(v_i-1, vi) ∀ 2<=i<=n
  Si crea un flusso g tale che:
  * g(v_i-1, vi) = cf(C)
  * g(vi, v_i-1) = -cf(C)
  * g(x,y) = 0 per tutte e altre coppie (x,y)

# Come trovare il cammino:
* Ford e Fulkerson suggerirono una semplice visita
  * Ford e Fulkerson suggerirono una semplice visita
  * Edmonds e Karp suggerirono una visita in ampiezza
  [entrambe costano O(n+m)]

@ Complessità Ford-Fulkerson
  Se le capacità sono intere, l'algoritmo ha complessità O((V+E)|f*|) se implementato con liste
  di adiacenza, O(V^2|f*|) con matrice.
  L'algoritmo parte dal flusso nullo e termina quando il valore totale del flusso raggiunge |f*|
  Ogni incremento del flusso aumenta il flusso di almeno una unità
  Ogni ricerca del cammino richiede una visita O(V+E), O(V^2)
  La somma dei flussi e il calcolo della rete residua può essere effettuato in tempo
  O(V+E) o O(V²)

@ Complessità Edmonds-Karp
  Se le capacità della rete sono intere, l'algoritmo ha complessità nel caso pessimo
  O(VE²).
  Con visita in ampiezza sono entrambi limiti superiori validi, si prende quello più basso

  # Teorema: Vengono eseguiti O(VE) aumenti di flusso, ognuno richiede O(V+E)
  Dimostrazione
  * Lemma-Monotonia:
    Sia δ_f(s,v) la distanza minima da s a v in una rete residua G_f. Sia f' = f+g un flusso nella rete
    iniziale, con g flusso non nullo derivante da un cammino aumentante. Allora δ_f'(s,v) >= δ_f(s,v)
    [δ calcolata in numero di archi]

    Dimostrazione:
      Quando viene aumentato il flusso, alcuni archi si "spengono". Tali archi erano utilizzati nei
      cammini minimi. Perciò tali cammini non possono diventare più corti.

  * Lemma - Aumenti di flusso:
    Il numero totale di aumenti di flusso eseguiti dall'algoritmo di Edmonds-Karp è O(VE)

    Dimostrazione:
    * Sia G_f una rete residua, sia C un cammino aumentante in G_f
    * (u,v) è un arco critico(collo di bottiglia) in C se c_f(u,v) = min {c_f(x,y) | x,y∈ C}
    * In ogni cammino esiste almeno un arco critico.
    * Una volta aggiunto il flusso associato a C l'arco critico scompare dalla rete residua.

    * Poiché i cammini aumentanti sono cammini minimi, abbiamo che:
      δ_f(s,v) = δ_f(s,u) + 1
    * L'arco (u,v) potrà ricomparire se e solo se il flusso lungo l'arco diminuirà, ovvero se (v,u)
      appare in un cammino aumentante.
    * Sia g il flusso quando questo accade; come sopra
      δ_g(s,u) = δ_g(s,v) + 1
    * per il lemma precedente,
      δ_g(s,u) = δ_g(s,v) + 1 >= δ_f(s,v) + 1 = δ_f(s,u) + 2

    => Dal momento in cui un nodo è critico al momento in cui può tornare a essere critico, si è
        allungato di almeno due passi.
        La lunghezza massima di un cammino fino a u, tenendo conto che poi si deve ancora seguire
        l'arco (u,v) è V-2
        * Quindi un arco può diventare critico al massimo (V-2)/2 = V/2-1 volte
          [ /2 perché aumenta almeno di 2 ogni volta ]
        * Poiché ci sono E archi, che possono diventare critici O(V) volte, il numero massimo di
          flussi aumentanti è O(VE)

# Dimostrazione correttezza dell'algoritmo
@ Un taglio (S,T) della rete di flusso G=(V,E,s,t,c) è una partizione di V in S e T=V-S tale che s ∈ S
  t ∈ T.

@ La capacità c(S,T) attraverso il taglio (S,T) è pari a ∑c(u,v) | u ∈ S, v ∈ T
@ Se f è un flusso in G, il FLUSSO NETTO (Flusso del taglio) F(S,T) attraverso (S,T) è:
  F(S,T) = ∑f(u,v)  | u ∈ S, v ∈ T

  # Lemma - valore del flusso del taglio
    Dati un flusso f e un taglio (S,T), la quantità di flusso F(S,T) che attraversa il taglio
    è uguale a |f|.

    Dimostrazione:
    F(S,T) = ∑f(u,v)  | u ∈ S, v ∈ T =
           = (∑f(u,v)  | u ∈ S, v ∈ V) - (∑f(u,v) | u ∈ S, v ∈ S) =         * T = V-S
           = ∑f(u,v)  | u ∈ S, v ∈ V  =                                     * antisimmetria
           = (∑f(u,v) | u ∈ S-{s}, v ∈ V) + (∑f(s,v) | v ∈ v) =
           = ∑f(s,v) | v ∈ v =                                               * conservazione del flusso
           = |f|
  # Lemma - Capacità taglio
    Il flusso massimo è limitato superiormente dalla capacità del taglio minimo, ovvero il taglio con
    capacità minore fra tutti i tagli

    Dimostrazione:
    * Nessun flusso attraverso un taglio supera la capacità C del taglio
      F(S,T) <= C(S,T) ∀ S ⊆ V, T = V-S, s∈S, t ∈ T
      Infatti F(S,T) = ∑f(u,v) | u in S, v in T <= ∑ c(u,v)... = C(S,T)
    * Il flusso che attraversa un taglio è uguale al valore del flusso
      |f| = F(S,T) ∀ S...
      => |f| <= C(S,T) ∀ S...

  # Teorema:
    Le seguenti 3 affermazioni sono equivalenti:
    1. f è un flusso massimo
    2. Non esiste un cammino aumentante per G_f
    3. Esiste un taglio minimo (S,T) tale che C(S,T) = |f|

    Dimostrazione circolare:
    1 => 2) se esistesse un cammino aumentante, il flusso potrebbe essere aumentato e quindi non
            sarebbe massimo, assurdo
    2 => 3) * Se non esiste un cammino aumentante, non esiste nessun cammino da s a t nella rete
              residua G_f
            * Sia S l'insieme dei vertici raggiungibili da S, T=V-S. Allora (S,T) è un taglio
            * Poiché t non è raggiungibile da s in G_f, tutti gli archi (u,v) con u ∈ S e v ∈ T sono
              saturati, ovvero f(u,v) = c(u,v).
            * Per il lemma valore del flusso di un taglio,
              |f| = ∑f(u,v) u ∈ S, v ∈ T
            * Quindi |f| = ∑f(u,v) u ∈ S, v ∈ T = ∑c(u,v) u ∈ S, v ∈ T = C(S,T)
    3 => 1) Poiché per qualsiasi flusso f e qualsiasi taglio (S,T) vale |f| <= C(S,T),
            il flusso che soddisfa l'uguaglianza è massimo
