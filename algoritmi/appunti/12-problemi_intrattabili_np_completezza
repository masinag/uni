### Teoria NP-completezza ###
Oltre a problemi che hanno soluzione in tempo polinomiale, esistono problemi interessanti che
richiedono tempo esponenziale o addirittura non sono risolvibili

Esistono problemi per cui non √® chiaro se esiste un algoritmo polinomiale. Questi problemi sono tutti
legati: se ne esistesse uno risolvibile in tempo polinomiale, allora lo sarebbero tutti!


@ Un PROBLEMA ASTRATTO √® una relazione binaria R ‚äÜ I x S tra un insieme di istanze I e un insieme
  di soluzioni S.
  Es. shortest path:
        * Istanze (V,E,u,v), soluzioni: sequenze di nodi.
@ Tipologie di problemi:
  * Ottimizzazione: trovare la soluzione migliore
  * Ricerca: trovare una soluzione ammissibile
  * Decisione: data un'istanza verificare se soddisfa o meno una propriet√†.

  Ottimizzazione => decisione, non decisione => non ottimizzazioni [risoluzione efficiente]

@ Dati due problemi decisionali R1 ‚äÜ I1 x {0,1}, R2 ‚äÜ I2 x {0,1},
  R1 √® RIDUCIBILE POLINOMIALMENTE a R2 (R1 <=_p R2) se esiste una funzione f: I1 -> I2 tale che:
  * f √® calcolabile in tempo polinomiale
  * per ogni istanza x ‚àà I1 e ogni soluzione s ‚àà {0,1}, (x,s) ‚àà R1 <=> (f(x), s) ‚àà R2

* COLORAZIONE DI GRAFI
  Dati un grafo non orientato G e un insieme di colori C, una COLORAZIONE dei vertici √® un assegnamento
  f: V -> C tale che nessuna coppia di nodi adiacenti ha lo stesso colore
  Ottimizzazione: restituire la colorazione che richiede il numero minimo di colori
  Decisione: dato un valore k , determinare se esiste una k-colorazione

* SUDOKU
  Data una matrice n¬≤ x n¬≤ divisa in sottomatrice n x n, inserire i numeri da 1 a n¬≤ in modo tale che nessun
  numero compaia pi√π di una volta in ogni riga, colonna e sottomatrice.
  Decisione: determinare se esiste un assegnamento valido.

  # √à possibile ridurre in tempo polinomiale Sudoku a graph-coloring dove ogni casella √® un nodo ed √®
    collegata a quelle della stessa riga, colonna, sottomatrice. I colori sono {1...n}
    => SUDOKU <=_p GRAPH-COLORING

* INDEPENDENT-SET
  Dato un grafo non orientato, un insieme S ‚äÜ V √® in INSIEME INDIPENDENTE se e solo se nessun arco
  unisce due nodi in S.
  Es. insieme vuoto, insieme di un elemento...
  Ottimizzazione: restituire il pi√π grande insieme indipendente
  Decisionale: dato un valore k, determinare se ne esiste uno grande almeno k

* VERTEX-COVER
  Dato un grafo non orientato G e un insieme S ‚äÜ V √® una COPERTURA DI VERTICI se e solo se ogni arco
  ha almeno un estremo in S.
  Ottimizzazione: trovare la copertura pi√π piccola
  Decisione: dato un valore k, determinare se ne esiste una grande al pi√π k

  # S √® un independent-set se e solo se V-S √® un vertex-cover
    I due problemi sono equivalenti

* SAT
  Dato un insieme V contenente n variabili
  * un letterale √® una variabile v oppure la sua negazione
  * una clausola √® una disgiunzione di letterali
  * una formula in forma normale congiuntiva √® una congiunzione di clausole

  Decisione: data una formula in CNF, decidere se esiste una assegnazione di valori di verit√† che
  renda l'espressione vera. [la formula √® SODDISFACIBILE]

* 3-SAT
  SAT in cui le clausole hanno esattamente 3 letterali
  3-SAT <= SAT
  √à possibile ridurre 3-SAT a INDEPENDENT SET:
  Per ogni clausola, aggiungo 3 nodi collegati fra loro. Per ogni letterale che compare in modo normale
  e negato, aggiungo un arco fra essi.
  La formula √® soddisfacibile se e solo se √® possibile trovare un independent-set di dimensione k
  [k numero di clausole]

  # inoltre vale N-SAT <=_p SAT perch√® ogni n-clausola pu√≤ essere ridotta a una o pi√π 3-clausole,
    es (x1 V x2 V x3 V x4) = (x1 V x2 V z) ‚àß (x3 V x4 V !z)
  Quindi SAT <= 3-SAT <= INDEPENDENT-SET <= VERTEX-COVER

### CLASSI ‚Ñô, ‚Ñô-SPACE
Dati un problema di decisione R e un algoritmo A che lavora in tempo f_s(n), A risolve R se
restituisce s su un'istanza x se e solo se (x,s) ‚àà R.

@ CLASSI DI COMPLESSIT√Ä
  Data una qualunque funzione f(n) chiamiamo:
  * ùïãùïÄùïÑùîº(f(n)) l'insieme dei problemi decisionali risolvibili da un algoritmo che lavora in tempo
    O(f(n))
  * ùïä‚Ñôùî∏‚ÑÇùîº(f(n)) l'insieme dei problemi decisionali risolvibili da un algoritmo che lavora in spazio
    O(f(n))

@ La CLASSE ‚Ñô √® la classe dei problemi decisionali risolvibili in tempo polinomiale nella dimensione
  n dell'istanza in ingresso:
    ‚Ñô = ‚à™ ùïãùïÄùïÑùîº(n^c) con c da 0 a ‚àû
@ La CLASSE ‚Ñôùïä‚Ñôùî∏‚ÑÇùîº √® la classe dei problemi decisionali risolvibili in spazio polinomiale nella
  dimensione n dell'istanza.
    ‚Ñôùïä‚Ñôùî∏‚ÑÇùîº = ‚à™ ùïä‚Ñôùî∏‚ÑÇùîº(n^c) con c da 0 a ‚àû

# Nota ‚Ñô ‚äÜ ‚Ñôùïä‚Ñôùî∏‚ÑÇùîº

@ Dato un problema decisionale R e un'istanza di input x tale che (x,true) ‚àà R, un CERTIFICATO √®
  un insieme di informazioni che permette di provare che (x,true) ‚àà R

  Es. SAT - un assegnamento di verit√† alle variabili della formula
      GRAPH-COLORING: un'associazione nodo-colore
      INDEPENDENT-SET: un sottoinsieme di V di k elementi

      Questi certificati hanno una dimensione polinomiale nella dimensione dell'input

@ La CLASSE ‚Ñï‚Ñô √® la classe dei problemi che ammettono un certificato verificabile in tempo polinomiale
  Es. SAT, GRAPH-COLORING, INDEPENDENT-SET

  Esempi di algoritmi non appartenenti a ‚Ñï‚Ñô [ si ritiene ]
  * Quantified Boolean Formula: generalizzazione di SAT in cui ad ogni variabile possono essere
    applicati quantificatori universali e esistenziali
    Es. ‚àÄx‚àÉy‚àÉz. ((x‚à®y)‚àßz)
@ Alternativamente la CLASSE ‚Ñï‚Ñô √® l'insieme dei problemi che possono essere risolti da una macchina
  di Turing non deterministica ["prende sempre la scelta giusta"] in tempo polinomiale

### RELAZIONI FRA PROBLEMI
# Lemma: se R1 <=_p R2 e R2 ‚àà ‚Ñô allora R1 ‚àà ‚Ñô

  Infatti Tf(n) = O(n^k_f) il tempo necessario a trasformare l'input tramite f,
          T2(n) = O(n^k_2) il tempo necessario per risolvere R2
  => T1 = O(n^(k_f*k_2) perch√© f potrebbe trasformare l'input in un input di grandezza n^k_f,
  comunque polinomiale.

@ Un problema decisionale R si dice ‚Ñï‚Ñô-hard se ogni problema Q ‚àà ‚Ñï‚Ñô √® riducibile polinomialmente a R
@ Un problema decisionale R si dice ‚Ñï‚Ñô-completo se appartiene a ‚Ñï‚Ñô e ‚Ñï‚Ñô-hard

‚Ñô = ‚Ñï‚Ñô???? Se esistesse un problema ‚Ñï‚Ñô-completo appartenente a ‚Ñô

# SAT √® ‚Ñï‚Ñô-completo
  Quindi per quanto abbiamo visto lo sono anche 3-SAT, INDEPENDENT-SET, VERTEX-COVER

Altri problemi ‚Ñï‚Ñô-completi:
  * Clique (CRICCA) dato un grafo non orientato e un intero k, esiste un sottoinsieme di k nodi tutti
    mutualmente adiacenti?
  * TSP - Commesso viaggiatore date n citt√†, le distanze tra esse e un intero k, √® possibile partire da
    una citt√†, attraversare ogni citt√† esattamente una volta e tornare alla citt√† di partenza,
    percorrendo una distanza non superiore a k?
  * Programmazione lineare 0/1: risolvere un sistema lineare di disequazioni tra interi
  * Copertura esatta di insiemi: Dato un insieme e una collezioni di sottoinsiemi, individuare una
    sottocollezione che partizioni l'insieme?
  * Zaino [non √® polinomiale!]
  * Partizione insieme in due insiemi di somma uguale
  * Dato un insieme, esiste un sottoinsieme di somma k
  * Circuito hamiltoniano
